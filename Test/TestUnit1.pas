unit TestUnit1;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Windows, Forms, Dialogs, Controls, Classes, ExtCtrls, SysUtils, ComCtrls,
  Variants, Graphics, Messages, Unit1, StdCtrls, jpeg;

type
  // Test methods for class TForm1

  TestTForm1 = class(TTestCase)
  strict private
    FForm1: TForm1;
  private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestcheckBarrier11;
    procedure TestcheckBarrier12;
    procedure TestcheckBarrier13;
    procedure TestcheckBarrier14;
    procedure TestcheckBarrier15;
    procedure TestcheckBarrier16;
    procedure TestcheckBarrier17;
    procedure TestcheckBarrier18;
    procedure TestcheckBarrier19;
    procedure TestcheckBarrier110;
    procedure TestcheckBarrier21;
    procedure TestcheckBarrier22;
    procedure TestcheckBarrier23;
    procedure TestcheckBarrier24;
    procedure TestcheckBarrier31;
    procedure TestcheckBarrier32;
    procedure TestcheckBarrier33;
    procedure TestcheckBarrier34;
  end;

implementation

procedure TestTForm1.SetUp;
begin
  FForm1 := TForm1.Create(nil);
end;

procedure TestTForm1.TearDown;
begin
  FForm1.Free;
  FForm1 := nil;
end;

procedure TestTForm1.TestcheckBarrier11;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 0;
  y := 0;
  q := 1;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(0, ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier12;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 137;
  y := 200;
  q := 4;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(0, ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier13;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 138;
  y := 200;
  q := 4;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(1, ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier14;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 138;
  y := 200;
  q := 2;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(0 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier15;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 200;
  y := 106;
  q := 4;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(1 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier16;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 200;
  y := 106;
  q := 1;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(0 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier17;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 200;
  y := 297;
  q := 1;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(1 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier18;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 200;
  y := 297;
  q := 3;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(0 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier19;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 613;
  y := 200;
  q := 4;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(0 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier110;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 613;
  y := 200;
  q := 2;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier1(x, y, q);
  // TODO: Validate method results
  CheckEquals(1 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier21;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 597;
  y := 10;
  q := 2;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier2(x, y, q);
  // TODO: Validate method results
  CheckEquals(1 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier22;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 597;
  y := 10;
  q := 4;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier2(x, y, q);
  // TODO: Validate method results
  CheckEquals(0 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier23;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 597;
  y := 300;
  q := 2;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier2(x, y, q);
  // TODO: Validate method results
  CheckEquals(1 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier24;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 597;
  y := 300;
  q := 4;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier2(x, y, q);
  // TODO: Validate method results
  CheckEquals(0 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier31;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 277;
  y := 5;
  q := 4;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier3(x, y, q);
  // TODO: Validate method results
  CheckEquals(0 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier32;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 277;
  y := 5;
  q := 2;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier3(x, y, q);
  // TODO: Validate method results
  CheckEquals(1 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier33;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 277;
  y := 300;
  q := 2;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier3(x, y, q);
  // TODO: Validate method results
  CheckEquals(1 , ReturnValue, '1');
end;

procedure TestTForm1.TestcheckBarrier34;
var
  ReturnValue: Integer;
  q: Integer;
  y: Integer;
  x: Integer;
begin
  x := 301;
  y := 300;
  q := 4;
  // TODO: Setup method call parameters
  ReturnValue := FForm1.checkBarrier3(x, y, q);
  // TODO: Validate method results
  CheckEquals(0 , ReturnValue, '1');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTForm1.Suite);
end.